local Loader = {}
Loader.__index = Loader

function Loader.new(settings)
    local self = setmetatable({}, Loader)
    
    -- Настройки по умолчанию
    self.Settings = {
        Title = "Quantum Loader",
        TitleColor = Color3.fromRGB(140, 230, 255),
        BackgroundColor = Color3.fromRGB(12, 12, 18),
        LoadingColor = Color3.fromRGB(140, 230, 255),
        LoadingTime = 6,
        LoadingTips = {
            "Initializing quantum modules...",
            "Calibrating neural network...",
            "Syncing with cloud...",
            "Optimizing performance...",
            "Finalizing setup..."
        },
        TipsColor = Color3.fromRGB(170, 170, 170),
        CircleRadius = 50,
        CircleColor = Color3.fromRGB(140, 230, 255),
        CircleSpeed = 1.5,
        ShowProgress = true,
        ShowTips = true,
        ShowAnimation = true,
        SoundEnabled = false,
        SoundId = "rbxassetid://9047378732",
        OnComplete = function() end,
        BlurBackground = true,
        BlurIntensity = 24,
        Author = "Quantum Team",
        AuthorColor = Color3.fromRGB(180, 180, 180),
        Version = "v2.4.1",
        VersionColor = Color3.fromRGB(120, 120, 120),
        ShowWatermark = true,
        WatermarkText = "QUANTUM LOADER",
        WatermarkColor = Color3.fromRGB(80, 80, 80),
        WatermarkTransparency = 0.7,
        BorderEnabled = true,
        BorderColor = Color3.fromRGB(40, 40, 50),
        BorderThickness = 1,
        GlowIntensity = 0.8,
        ParticleCount = 8,
        EnablePulseEffect = true
    }
    
    -- Применение пользовательских настроек
    for k, v in pairs(settings) do
        if self.Settings[k] ~= nil then
            self.Settings[k] = v
        end
    end
    
    -- Создание интерфейса
    self.ScreenGui = Instance.new("ScreenGui")
    self.ScreenGui.Name = "QuantumLoaderUI"
    self.ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    self.ScreenGui.ResetOnSpawn = false
    
    -- Размытие фона
    if self.Settings.BlurBackground then
        self.BlurEffect = Instance.new("BlurEffect")
        self.BlurEffect.Size = 6
        self.BlurEffect.Parent = game:GetService("Lighting")
        
        game:GetService("TweenService"):Create(
            self.BlurEffect,
            TweenInfo.new(0.8),
            {Size = self.Settings.BlurIntensity}
        ):Play()
    end
    
    -- Основной контейнер
    self.MainFrame = Instance.new("Frame")
    self.MainFrame.Name = "MainFrame"
    self.MainFrame.Size = UDim2.new(0, 380, 0, 260)
    self.MainFrame.Position = UDim2.new(0.5, -190, 0.5, -130)
    self.MainFrame.BackgroundColor3 = self.Settings.BackgroundColor
    self.MainFrame.BackgroundTransparency = 0.1
    
    -- Градиентный фон
    local gradient = Instance.new("UIGradient")
    gradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(15, 15, 22)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(10, 10, 15))
    }
    gradient.Rotation = 45
    gradient.Parent = self.MainFrame
    
    -- Скругление углов
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 14)
    corner.Parent = self.MainFrame
    
    -- Светящаяся рамка
    if self.Settings.BorderEnabled then
        local border = Instance.new("UIStroke")
        border.Name = "Border"
        border.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
        border.Color = self.Settings.BorderColor
        border.Thickness = self.Settings.BorderThickness
        border.Transparency = 0.5
        border.Parent = self.MainFrame
        
        game:GetService("TweenService"):Create(
            border,
            TweenInfo.new(2, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, -1, true),
            {Transparency = 0.8}
        ):Play()
    end
    
    -- Эффект свечения
    local glow = Instance.new("ImageLabel")
    glow.Name = "GlowEffect"
    glow.Size = UDim2.new(1.4, 0, 1.4, 0)
    glow.Position = UDim2.new(-0.2, 0, -0.2, 0)
    glow.Image = "rbxassetid://5028857084"
    glow.ImageColor3 = self.Settings.CircleColor
    glow.ImageTransparency = 0.9
    glow.ScaleType = Enum.ScaleType.Slice
    glow.SliceCenter = Rect.new(24, 24, 276, 276)
    glow.BackgroundTransparency = 1
    glow.ZIndex = -1
    glow.Parent = self.MainFrame
    
    -- Заголовок
    self.TitleLabel = Instance.new("TextLabel")
    self.TitleLabel.Name = "TitleLabel"
    self.TitleLabel.Size = UDim2.new(1, -40, 0, 32)
    self.TitleLabel.Position = UDim2.new(0, 20, 0, 20)
    self.TitleLabel.BackgroundTransparency = 1
    self.TitleLabel.Text = self.Settings.Title
    self.TitleLabel.TextColor3 = self.Settings.TitleColor
    self.TitleLabel.TextSize = 22
    self.TitleLabel.Font = Enum.Font.GothamSemibold
    self.TitleLabel.TextXAlignment = Enum.TextXAlignment.Left
    self.TitleLabel.Parent = self.MainFrame
    
    -- Линия под заголовком
    self.TitleLine = Instance.new("Frame")
    self.TitleLine.Name = "TitleLine"
    self.TitleLine.Size = UDim2.new(1, -40, 0, 1)
    self.TitleLine.Position = UDim2.new(0, 20, 0, 60)
    self.TitleLine.BackgroundColor3 = Color3.fromRGB(35, 35, 45)
    self.TitleLine.BorderSizePixel = 0
    
    local lineGradient = Instance.new("UIGradient")
    lineGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(35, 35, 45)),
        ColorSequenceKeypoint.new(0.5, self.Settings.TitleColor),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(35, 35, 45))
    }
    lineGradient.Parent = self.TitleLine
    
    self.TitleLine.Parent = self.MainFrame
    
    -- Информация об авторе
    self.AuthorLabel = Instance.new("TextLabel")
    self.AuthorLabel.Name = "AuthorLabel"
    self.AuthorLabel.Size = UDim2.new(1, -40, 0, 16)
    self.AuthorLabel.Position = UDim2.new(0, 20, 0, 65)
    self.AuthorLabel.BackgroundTransparency = 1
    self.AuthorLabel.Text = "by "..self.Settings.Author
    self.AuthorLabel.TextColor3 = self.Settings.AuthorColor
    self.AuthorLabel.TextSize = 14
    self.AuthorLabel.Font = Enum.Font.Gotham
    self.AuthorLabel.TextXAlignment = Enum.TextXAlignment.Left
    self.AuthorLabel.Parent = self.MainFrame
    
    -- Версия
    self.VersionLabel = Instance.new("TextLabel")
    self.VersionLabel.Name = "VersionLabel"
    self.VersionLabel.Size = UDim2.new(1, -40, 0, 16)
    self.VersionLabel.Position = UDim2.new(0, 20, 0, 85)
    self.VersionLabel.BackgroundTransparency = 1
    self.VersionLabel.Text = self.Settings.Version
    self.VersionLabel.TextColor3 = self.Settings.VersionColor
    self.VersionLabel.TextSize = 12
    self.VersionLabel.Font = Enum.Font.Gotham
    self.VersionLabel.TextXAlignment = Enum.TextXAlignment.Left
    self.VersionLabel.Parent = self.MainFrame
    
    -- Контейнер для анимации
    self.AnimationContainer = Instance.new("Frame")
    self.AnimationContainer.Name = "AnimationContainer"
    self.AnimationContainer.Size = UDim2.new(1, -40, 0, 80)
    self.AnimationContainer.Position = UDim2.new(0, 20, 0, 110)
    self.AnimationContainer.BackgroundTransparency = 1
    self.AnimationContainer.Parent = self.MainFrame
    
    -- Прогресс бар
    self.ProgressBar = Instance.new("Frame")
    self.ProgressBar.Name = "ProgressBar"
    self.ProgressBar.Size = UDim2.new(1, -40, 0, 4)
    self.ProgressBar.Position = UDim2.new(0, 20, 0, 210)
    self.ProgressBar.BackgroundColor3 = Color3.fromRGB(30, 30, 40)
    self.ProgressBar.BorderSizePixel = 0
    
    local progressCorner = Instance.new("UICorner")
    progressCorner.CornerRadius = UDim.new(1, 0)
    progressCorner.Parent = self.ProgressBar
    
    self.ProgressFill = Instance.new("Frame")
    self.ProgressFill.Name = "ProgressFill"
    self.ProgressFill.Size = UDim2.new(0, 0, 1, 0)
    self.ProgressFill.BackgroundColor3 = self.Settings.LoadingColor
    self.ProgressFill.BorderSizePixel = 0
    
    local fillCorner = Instance.new("UICorner")
    fillCorner.CornerRadius = UDim.new(1, 0)
    fillCorner.Parent = self.ProgressFill
    
    local progressGradient = Instance.new("UIGradient")
    progressGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, self.Settings.LoadingColor),
        ColorSequenceKeypoint.new(1, Color3.new(
            math.min(self.Settings.LoadingColor.R + 0.12, 1),
            math.min(self.Settings.LoadingColor.G + 0.12, 1),
            math.min(self.Settings.LoadingColor.B + 0.12, 1)
        ))
    }
    progressGradient.Rotation = 90
    progressGradient.Parent = self.ProgressFill
    
    self.ProgressFill.Parent = self.ProgressBar
    self.ProgressBar.Parent = self.MainFrame
    
    -- Подсказки
    self.TipsLabel = Instance.new("TextLabel")
    self.TipsLabel.Name = "TipsLabel"
    self.TipsLabel.Size = UDim2.new(1, -40, 0, 20)
    self.TipsLabel.Position = UDim2.new(0, 20, 0, 220)
    self.TipsLabel.BackgroundTransparency = 1
    self.TipsLabel.Text = ""
    self.TipsLabel.TextColor3 = self.Settings.TipsColor
    self.TipsLabel.TextSize = 14
    self.TipsLabel.Font = Enum.Font.Gotham
    self.TipsLabel.TextXAlignment = Enum.TextXAlignment.Left
    self.TipsLabel.Parent = self.MainFrame
    
    -- Водяной знак
    if self.Settings.ShowWatermark then
        self.WatermarkLabel = Instance.new("TextLabel")
        self.WatermarkLabel.Name = "WatermarkLabel"
        self.WatermarkLabel.Size = UDim2.new(1, 0, 0, 20)
        self.WatermarkLabel.Position = UDim2.new(0, 0, 1, -20)
        self.WatermarkLabel.BackgroundTransparency = 1
        self.WatermarkLabel.Text = self.Settings.WatermarkText
        self.WatermarkLabel.TextColor3 = self.Settings.WatermarkColor
        self.WatermarkLabel.TextTransparency = self.Settings.WatermarkTransparency
        self.WatermarkLabel.TextSize = 12
        self.WatermarkLabel.Font = Enum.Font.Gotham
        self.WatermarkLabel.Parent = self.MainFrame
    end
    
    -- Элементы анимации
    if self.Settings.ShowAnimation then
        self:CreateAnimationElements()
    end
    
    -- Звук
    if self.Settings.SoundEnabled then
        self.Sound = Instance.new("Sound")
        self.Sound.SoundId = self.Settings.SoundId
        self.Sound.Volume = 0.25
        self.Sound.Looped = true
        self.Sound.Parent = self.ScreenGui
    end
    
    self.ScreenGui.Parent = game:GetService("CoreGui")
    
    return self
end

function Loader:CreateAnimationElements()
    -- Центральный круг
    self.Circle = Instance.new("Frame")
    self.Circle.Name = "Circle"
    self.Circle.Size = UDim2.new(0, self.Settings.CircleRadius, 0, self.Settings.CircleRadius)
    self.Circle.Position = UDim2.new(0.5, -self.Settings.CircleRadius/2, 0.5, -self.Settings.CircleRadius/2)
    self.Circle.BackgroundColor3 = self.Settings.CircleColor
    self.Circle.BackgroundTransparency = 0.6
    self.Circle.BorderSizePixel = 0
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(1, 0)
    corner.Parent = self.Circle
    
    -- Эффект свечения
    local glow = Instance.new("ImageLabel")
    glow.Name = "Glow"
    glow.Size = UDim2.new(2.5, 0, 2.5, 0)
    glow.Position = UDim2.new(-0.75, 0, -0.75, 0)
    glow.Image = "rbxassetid://5028857084"
    glow.ImageColor3 = self.Settings.CircleColor
    glow.ImageTransparency = 0.9 - (self.Settings.GlowIntensity * 0.1)
    glow.BackgroundTransparency = 1
    glow.ZIndex = -1
    glow.Parent = self.Circle
    
    if self.Settings.EnablePulseEffect then
        game:GetService("TweenService"):Create(
            glow,
            TweenInfo.new(2, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut, -1, true),
            {ImageTransparency = 0.7 - (self.Settings.GlowIntensity * 0.1)}
        ):Play()
    end
    
    self.Circle.Parent = self.AnimationContainer
    
    -- Вращающиеся частицы
    for i = 1, self.Settings.ParticleCount do
        local particle = Instance.new("Frame")
        particle.Name = "Particle_"..i
        particle.Size = UDim2.new(0, 8, 0, 8)
        particle.BackgroundColor3 = self.Settings.CircleColor
        particle.BackgroundTransparency = 0.5
        particle.BorderSizePixel = 0
        
        local pCorner = Instance.new("UICorner")
        pCorner.CornerRadius = UDim.new(1, 0)
        pCorner.Parent = particle
        
        local pGlow = Instance.new("ImageLabel")
        pGlow.Name = "ParticleGlow"
        pGlow.Size = UDim2.new(2, 0, 2, 0)
        pGlow.Position = UDim2.new(-0.5, 0, -0.5, 0)
        pGlow.Image = "rbxassetid://5028857084"
        pGlow.ImageColor3 = self.Settings.CircleColor
        pGlow.ImageTransparency = 0.85
        pGlow.BackgroundTransparency = 1
        pGlow.ZIndex = -1
        pGlow.Parent = particle
        
        particle.Parent = self.AnimationContainer
    end
end

function Loader:AnimateLoading()
    if self.Settings.SoundEnabled then
        self.Sound:Play()
    end
    
    local startTime = tick()
    local endTime = startTime + self.Settings.LoadingTime
    local lastTipChange = 0
    local currentTipIndex = 1
    
    local rotationConn
    if self.Settings.ShowAnimation then
        rotationConn = game:GetService("RunService").RenderStepped:Connect(function()
            local now = tick()
            local elapsed = now - startTime
            local progress = math.min(elapsed / self.Settings.LoadingTime, 1)
            
            self.Circle.Rotation = elapsed * 50 * self.Settings.CircleSpeed
            
            for i = 1, self.Settings.ParticleCount do
                local particle = self.AnimationContainer:FindFirstChild("Particle_"..i)
                if particle then
                    local angle = math.rad((i * (360/self.Settings.ParticleCount)) + (elapsed * 250 * self.Settings.CircleSpeed))
                    local distance = self.Settings.CircleRadius + 20 + (i * 3)
                    local x = math.cos(angle) * distance
                    local y = math.sin(angle) * distance
                    
                    particle.Position = UDim2.new(
                        0.5, x - particle.Size.X.Offset/2,
                        0.5, y - particle.Size.Y.Offset/2
                    )
                    
                    if self.Settings.EnablePulseEffect then
                        local scale = 0.6 + 0.4 * math.sin(elapsed * 4 + i)
                        particle.Size = UDim2.new(0, 8 * scale, 0, 8 * scale)
                        particle.BackgroundTransparency = 0.5 + (0.3 * math.sin(elapsed * 3 + i * 0.5))
                    end
                end
            end
            
            if self.Settings.ShowProgress then
                self.ProgressFill.Size = UDim2.new(progress, 0, 1, 0)
            end
            
            if self.Settings.ShowTips and now - lastTipChange > 3 and #self.Settings.LoadingTips > 0 then
                lastTipChange = now
                currentTipIndex = currentTipIndex % #self.Settings.LoadingTips + 1
                self.TipsLabel.Text = self.Settings.LoadingTips[currentTipIndex]
                
                self.TipsLabel.TextTransparency = 1
                local tipTween = game:GetService("TweenService"):Create(
                    self.TipsLabel,
                    TweenInfo.new(0.5, Enum.EasingStyle.Quint),
                    {TextTransparency = 0}
                )
                tipTween:Play()
            end
            
            if progress >= 1 then
                rotationConn:Disconnect()
                self:CompleteLoading()
            end
        end)
    else
        local simpleConn
        simpleConn = game:GetService("RunService").Heartbeat:Connect(function()
            local now = tick()
            local progress = math.min((now - startTime) / self.Settings.LoadingTime, 1)
            
            if self.Settings.ShowProgress then
                self.ProgressFill.Size = UDim2.new(progress, 0, 1, 0)
            end
            
            if self.Settings.ShowTips and now - lastTipChange > 3 and #self.Settings.LoadingTips > 0 then
                lastTipChange = now
                currentTipIndex = currentTipIndex % #self.Settings.LoadingTips + 1
                self.TipsLabel.Text = self.Settings.LoadingTips[currentTipIndex]
                
                self.TipsLabel.TextTransparency = 1
                game:GetService("TweenService"):Create(
                    self.TipsLabel,
                    TweenInfo.new(0.5, Enum.EasingStyle.Quint),
                    {TextTransparency = 0}
                ):Play()
            end
            
            if progress >= 1 then
                simpleConn:Disconnect()
                self:CompleteLoading()
            end
        end)
    end
end

function Loader:CompleteLoading()
    local fadeOut = game:GetService("TweenService"):Create(
        self.MainFrame,
        TweenInfo.new(0.8, Enum.EasingStyle.Quint),
        {BackgroundTransparency = 1}
    )
    
    fadeOut:Play()
    
    for _, child in ipairs(self.MainFrame:GetDescendants()) do
        if child:IsA("TextLabel") or child:IsA("TextButton") then
            game:GetService("TweenService"):Create(
                child,
                TweenInfo.new(0.6, Enum.EasingStyle.Quint),
                {TextTransparency = 1}
            ):Play()
        elseif child:IsA("Frame") then
            game:GetService("TweenService"):Create(
                child,
                TweenInfo.new(0.6, Enum.EasingStyle.Quint),
                {BackgroundTransparency = 1}
            ):Play()
        elseif child:IsA("ImageLabel") then
            game:GetService("TweenService"):Create(
                child,
                TweenInfo.new(0.6, Enum.EasingStyle.Quint),
                {ImageTransparency = 1}
            ):Play()
        elseif child:IsA("UIStroke") then
            game:GetService("TweenService"):Create(
                child,
                TweenInfo.new(0.6, Enum.EasingStyle.Quint),
                {Transparency = 1}
            ):Play()
        end
    end
    
    if self.Settings.BlurBackground and self.BlurEffect then
        game:GetService("TweenService"):Create(
            self.BlurEffect,
            TweenInfo.new(0.8, Enum.EasingStyle.Quint),
            {Size = 0}
        ):Play()
        
        delay(0.8, function()
            self.BlurEffect:Destroy()
        end)
    end
    
    if self.Settings.SoundEnabled and self.Sound then
        self.Sound:Stop()
    end
    
    fadeOut.Completed:Wait()
    self.ScreenGui:Destroy()
    
    if type(self.Settings.OnComplete) == "function" then
        self.Settings.OnComplete()
    end
end

function Loader:Start()
    self:AnimateLoading()
end

return function(settings)
    local loader = Loader.new(settings)
    loader:Start()
    return loader
end
