
local Loader = {}
Loader.__index = Loader

function Loader.new(settings)
    local self = setmetatable({}, Loader)
    
    self.Settings = {
        Title = "Premium Loader",
        TitleColor = Color3.fromRGB(0, 162, 255),
        BackgroundColor = Color3.fromRGB(20, 20, 30),
        LoadingColor = Color3.fromRGB(0, 162, 255),
        LoadingTime = 5,
        LoadingTips = {"Loading...", "Please wait..."},
        TipsColor = Color3.fromRGB(200, 200, 200),
        CircleRadius = 50,
        CircleColor = Color3.fromRGB(0, 162, 255),
        CircleSpeed = 1,
        ShowProgress = true,
        ShowTips = true,
        ShowAnimation = true,
        OnComplete = function() end
    }

    for k, v in pairs(settings) do
        if self.Settings[k] ~= nil then
            self.Settings[k] = v
        end
    end

    self.ScreenGui = Instance.new("ScreenGui")
    self.ScreenGui.Name = "PremiumLoaderUI"
    self.ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    self.ScreenGui.ResetOnSpawn = false

    self.MainFrame = Instance.new("Frame")
    self.MainFrame.Size = UDim2.new(0, 400, 0, 300)
    self.MainFrame.Position = UDim2.new(0.5, -200, 0.5, -150)
    self.MainFrame.BackgroundColor3 = self.Settings.BackgroundColor
    self.MainFrame.BackgroundTransparency = 0.1
    self.MainFrame.BorderSizePixel = 0

    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 8)
    corner.Parent = self.MainFrame

    self.TitleLabel = Instance.new("TextLabel")
    self.TitleLabel.Size = UDim2.new(1, 0, 0, 40)
    self.TitleLabel.Position = UDim2.new(0, 0, 0, 20)
    self.TitleLabel.BackgroundTransparency = 1
    self.TitleLabel.Text = self.Settings.Title
    self.TitleLabel.TextColor3 = self.Settings.TitleColor
    self.TitleLabel.TextSize = 24
    self.TitleLabel.Font = Enum.Font.GothamBold
    self.TitleLabel.Parent = self.MainFrame

    self.AnimationContainer = Instance.new("Frame")
    self.AnimationContainer.Size = UDim2.new(1, 0, 0, 100)
    self.AnimationContainer.Position = UDim2.new(0, 0, 0.5, -50)
    self.AnimationContainer.BackgroundTransparency = 1
    self.AnimationContainer.Parent = self.MainFrame

    self.ProgressBar = Instance.new("Frame")
    self.ProgressBar.Size = UDim2.new(0.8, 0, 0, 4)
    self.ProgressBar.Position = UDim2.new(0.1, 0, 0.8, 0)
    self.ProgressBar.BackgroundColor3 = Color3.fromRGB(50, 50, 70)
    self.ProgressBar.BorderSizePixel = 0
    self.ProgressBar.Parent = self.MainFrame

    self.ProgressFill = Instance.new("Frame")
    self.ProgressFill.Size = UDim2.new(0, 0, 1, 0)
    self.ProgressFill.BackgroundColor3 = self.Settings.LoadingColor
    self.ProgressFill.BorderSizePixel = 0
    self.ProgressFill.Parent = self.ProgressBar

    self.TipsLabel = Instance.new("TextLabel")
    self.TipsLabel.Size = UDim2.new(0.8, 0, 0, 20)
    self.TipsLabel.Position = UDim2.new(0.1, 0, 0.9, 0)
    self.TipsLabel.BackgroundTransparency = 1
    self.TipsLabel.Text = ""
    self.TipsLabel.TextColor3 = self.Settings.TipsColor
    self.TipsLabel.TextSize = 14
    self.TipsLabel.Font = Enum.Font.Gotham
    self.TipsLabel.Parent = self.MainFrame

    if self.Settings.ShowAnimation then
        self.Circle = Instance.new("Frame")
        self.Circle.Size = UDim2.new(0, self.Settings.CircleRadius, 0, self.Settings.CircleRadius)
        self.Circle.Position = UDim2.new(0.5, -self.Settings.CircleRadius/2, 0.5, -self.Settings.CircleRadius/2)
        self.Circle.BackgroundColor3 = self.Settings.CircleColor
        self.Circle.BackgroundTransparency = 0.5
        self.Circle.BorderSizePixel = 0
        
        local circleCorner = Instance.new("UICorner")
        circleCorner.CornerRadius = UDim.new(1, 0)
        circleCorner.Parent = self.Circle
        
        self.Circle.Parent = self.AnimationContainer
        
        for i = 1, 8 do
            local particle = Instance.new("Frame")
            particle.Size = UDim2.new(0, 10, 0, 10)
            particle.BackgroundColor3 = self.Settings.CircleColor
            particle.BorderSizePixel = 0
            
            local pCorner = Instance.new("UICorner")
            pCorner.CornerRadius = UDim.new(1, 0)
            pCorner.Parent = particle
            
            particle.Parent = self.AnimationContainer
        end
    end

    self.ScreenGui.Parent = game:GetService("CoreGui")
    return self
end

function Loader:AnimateLoading()
    local startTime = tick()
    local endTime = startTime + self.Settings.LoadingTime
    local lastTipChange = 0
    local currentTipIndex = 1

    local rotationConn
    if self.Settings.ShowAnimation then
        rotationConn = game:GetService("RunService").RenderStepped:Connect(function()
            local now = tick()
            local elapsed = now - startTime
            local progress = math.min(elapsed / self.Settings.LoadingTime, 1)
            
            if self.Settings.ShowAnimation then
                self.Circle.Rotation = elapsed * 30 * self.Settings.CircleSpeed
                
                for i = 1, 8 do
                    local particle = self.AnimationContainer:FindFirstChild("Particle_"..i) or self.AnimationContainer:GetChildren()[i+1]
                    if particle then
                        local angle = math.rad((i * 45) + (elapsed * 180 * self.Settings.CircleSpeed))
                        local distance = self.Settings.CircleRadius + 30
                        local x = math.cos(angle) * distance
                        local y = math.sin(angle) * distance
                        
                        particle.Position = UDim2.new(0.5, x - 5, 0.5, y - 5)
                    end
                end
            end
            
            if self.Settings.ShowProgress then
                self.ProgressFill.Size = UDim2.new(progress, 0, 1, 0)
            end
            
            if self.Settings.ShowTips and now - lastTipChange > 2 and #self.Settings.LoadingTips > 0 then
                lastTipChange = now
                currentTipIndex = currentTipIndex % #self.Settings.LoadingTips + 1
                self.TipsLabel.Text = self.Settings.LoadingTips[currentTipIndex]
                self.TipsLabel.TextTransparency = 1
                game:GetService("TweenService"):Create(
                    self.TipsLabel,
                    TweenInfo.new(0.3),
                    {TextTransparency = 0}
                ):Play()
            end
            
            if progress >= 1 then
                if rotationConn then rotationConn:Disconnect() end
                self:CompleteLoading()
            end
        end)
    else
        local simpleConn = game:GetService("RunService").Heartbeat:Connect(function()
            local now = tick()
            local progress = math.min((now - startTime) / self.Settings.LoadingTime, 1)
            
            if self.Settings.ShowProgress then
                self.ProgressFill.Size = UDim2.new(progress, 0, 1, 0)
            end
            
            if self.Settings.ShowTips and now - lastTipChange > 2 and #self.Settings.LoadingTips > 0 then
                lastTipChange = now
                currentTipIndex = currentTipIndex % #self.Settings.LoadingTips + 1
                self.TipsLabel.Text = self.Settings.LoadingTips[currentTipIndex]
                self.TipsLabel.TextTransparency = 1
                game:GetService("TweenService"):Create(
                    self.TipsLabel,
                    TweenInfo.new(0.3),
                    {TextTransparency = 0}
                ):Play()
            end
            
            if progress >= 1 then
                simpleConn:Disconnect()
                self:CompleteLoading()
            end
        end)
    end
end

function Loader:CompleteLoading()
    local fadeOut = game:GetService("TweenService"):Create(
        self.MainFrame,
        TweenInfo.new(0.5),
        {BackgroundTransparency = 1}
    )
    fadeOut:Play()

    for _, child in ipairs(self.MainFrame:GetDescendants()) do
        if child:IsA("TextLabel") or child:IsA("TextButton") then
            game:GetService("TweenService"):Create(
                child,
                TweenInfo.new(0.5),
                {TextTransparency = 1}
            ):Play()
        elseif child:IsA("Frame") then
            game:GetService("TweenService"):Create(
                child,
                TweenInfo.new(0.5),
                {BackgroundTransparency = 1}
            ):Play()
        end
    end

    fadeOut.Completed:Wait()
    self.ScreenGui:Destroy()
    
    if type(self.Settings.OnComplete) == "function" then
        self.Settings.OnComplete()
    end
end

function Loader:Start()
    self:AnimateLoading()
end

return function(settings)
    local loader = Loader.new(settings)
    loader:Start()
    return loader
end
